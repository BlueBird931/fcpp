// Copyright Â© 2020 Giorgio Audrito. All Rights Reserved.

/**
 * @file timer.hpp
 * @brief Implementation of the `timer` component managing round executions.
 */

#ifndef FCPP_COMPONENT_TIMER_H_
#define FCPP_COMPONENT_TIMER_H_

#include <cassert>
#include <type_traits>

#include "lib/settings.hpp"
#include "lib/common/tagged_tuple.hpp"
#include "lib/data/field.hpp"


/**
 * @brief Namespace containing all the objects in the FCPP library.
 */
namespace fcpp {


//! @brief Namespace for all FCPP components.
namespace component {


//! @brief Namespace of tags to be used for `tagged_tuple` objects.
namespace tags {
    //! @brief Tag associating to a starting time of execution.
    struct start {};
}


/**
 * @brief Component managing round executions.
 *
 * Initialises `node` with tag `start` associating to a `times_t` starting time of execution (defaults to `fcpp::TIME_MAX`).
 * It warps the times of events generated by parent components (and not by ancestor components).
 * Must be unique in a composition of components.
 * The `timer` component cannot be a parent of a `scheduler`, otherwise round planning may not work.
 * Any `connector` component cannot be a parent of a `timer`, otherwise round planning may block message exchange.
 */
struct timer {
    /**
     * @brief The actual component.
     *
     * Component functionalities are added to those of the parent by inheritance at multiple levels: the whole component class inherits tag for static checks of correct composition, while `node` and `net` sub-classes inherit actual behaviour.
     * Further parametrisation with F enables <a href="https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern">CRTP</a> for static emulation of virtual calls.
     *
     * @param F The final composition of all components.
     * @param P The parent component to inherit from.
     */
    template <typename F, typename P>
    struct component : public P {
        //! @brief Marks that a timer component is present.
        struct timer_tag {};
        
        //! @brief Checks if T has a `timer_tag`.
        template <typename T, typename = int>
        struct has_ttag : std::false_type {};
        template <typename T>
        struct has_ttag<T, std::conditional_t<true,int,typename T::timer_tag>> : std::true_type {};
        
        //! @brief Asserts that P has no `timer_tag`.
        static_assert(not has_ttag<P>::value, "cannot combine multiple timer components");
        
        //! @brief Checks if T has a `connector_tag`.
        template <typename T, typename = int>
        struct has_ctag : std::false_type {};
        template <typename T>
        struct has_ctag<T, std::conditional_t<true,int,typename T::connector_tag>> : std::true_type {};
        
        //! @brief Asserts that P has no `connector_tag`.
        static_assert(not has_ctag<P>::value, "connector cannot be parent of timer component");

        //! @brief The local part of the component.
        class node : public P::node {
          public: // visible by net objects and the main program
            /**
             * @brief Main constructor.
             *
             * @param n The corresponding net object.
             * @param t A `tagged_tuple` gathering initialisation values.
             */
            template <typename S, typename T>
            node(typename F::net& n, const tagged_tuple<S,T>& t) : P::node(n,t), m_neigh(TIME_MIN) {
                m_prev = m_cur = TIME_MIN;
                m_next = get_or<tags::start>(t, TIME_MAX);
                m_offs = (m_next == TIME_MAX ? 0 : m_next);
                m_fact = 1.0;
            }
            
            /**
             * @brief Returns next event to schedule for the node component.
             *
             * Should correspond to the next time also during updates.
             */
            times_t next() const {
                return m_next < TIME_MAX ? m_next : m_offs < TIME_MAX and P::node::next() < TIME_MAX ? P::node::next()/m_fact + m_offs : TIME_MAX;
            }
            
            //! @brief Updates the internal status of node component.
            void update() {
                m_prev = m_cur;
                m_cur = next();
                fcpp::details::self(m_neigh, P::node::uid) = m_prev;
                if (m_next < TIME_MAX) {
                    // next round was planned
                    m_next = TIME_MAX;
                    P::node::round(m_cur);
                } else {
                    // next round was scheduled
                    P::node::update();
                }
            }
            
          protected: // visible by node objects only
            //! @brief Receives an incoming message (possibly reading values from sensors).
            template <typename S, typename T>
            void receive(times_t t, device_t d, const tagged_tuple<S,T>& m) {
                P::node::receive(t, d, m);
                fcpp::details::self(m_neigh, d) = t;
            }
            
            //! @brief Returns the time of the second most recent round (previous during rounds).
            times_t previous_time() {
                return m_prev;
            }

            //! @brief Returns the time of the most recent round (current during rounds).
            times_t current_time() {
                return m_cur;
            }
            
            //! @brief Returns the time of the next scheduled round.
            times_t next_time() {
                return next();
            }
            
            //! @brief Plans the time of the next round (`TIME_MAX` to indicate termination).
            void next_time(times_t t) {
                if (t < TIME_MAX) {
                    assert(m_offs < TIME_MAX);
                    m_offs += t - (m_next < TIME_MAX ? m_next : m_cur);
                } else m_offs = TIME_MAX;
                m_next = t;
            }
            
            //! @brief Terminate round executions.
            void terminate() {
                m_next = m_offs = TIME_MAX;
            }
            
            //! @brief Returns the time stamps of the most recent messages from neighbours.
            const field<times_t>& message_time() {
                return m_neigh;
            }
            
            //! @brief Returns the warping factor applied to following schedulers.
            double frequency() {
                return m_fact;
            }
            
            //! @brief Sets the warping factor applied to following schedulers.
            void frequency(double f) {
                if (m_offs < TIME_MAX) m_offs = m_cur - times_t(m_fact*(m_cur - m_offs)/f);
                m_fact = f;
            }
            
          private: // implementation details
            //! @brief Times of previous, current and next planned rounds.
            times_t m_prev, m_cur, m_next;
            
            //! @brief Times of neighbours.
            field<times_t> m_neigh;
            
            //! @brief Offset between the following schedule and actual times.
            times_t m_offs;
            
            //! @brief Warping factor for the following schedule.
            double m_fact;
        };
        
        //! @brief The global part of the component.
        class net : public P::net {
          public: // visible by node objects and the main program
            //! @brief Constructor from a tagged tuple.
            template <typename S, typename T>
            net(const tagged_tuple<S,T>& t) : P::net(t) {
                m_offs = 0;
                m_fact = 1.0;
            }
            
            /**
             * @brief Returns next event to schedule for the net component.
             * 
             * Should correspond to the next time also during updates.
             */
            times_t next() const {
                return m_offs < TIME_MAX and P::net::next() < TIME_MAX ? P::net::next()/m_fact + m_offs : TIME_MAX;
            }
            
          protected: // visible by node objects only
            //! @brief Terminate round executions.
            void terminate() {
                m_offs = TIME_MAX;
            }
            
            //! @brief Returns the warping factor applied to following schedulers.
            double frequency() {
                return m_fact;
            }
            
            //! @brief Sets the warping factor applied to following schedulers (given current time `t`).
            void frequency(double f, times_t t) {
                if (m_offs < TIME_MAX) m_offs = t - times_t(m_fact*(t - m_offs)/f);
                m_fact = f;
            }
            
          private: // implementation details
            //! @brief Offset between the following schedule and actual times.
            times_t m_offs;
            
            //! @brief Warping factor for the following schedule.
            double m_fact;
        };
    };
};


}


}

#endif // FCPP_COMPONENT_TIMER_H_
